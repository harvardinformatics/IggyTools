#!/usr/bin/env python 
from optparse import OptionParser
import sys, os, re, time, traceback
import os.path as path
from iggytools.utils.util import intersect, touch, append, email
from iggytools.iggyseq.runClasses import IlluminaNextGen, getSeqPref
from iggytools.iggyseq.seqstats import addSeqRun
from iggytools.iggyseq.seqUtil import setPermissions

from django.core.wsgi import get_wsgi_application
os.environ['DJANGO_SETTINGS_MODULE'] = 'iggytools.iggyapp.settings'
application = get_wsgi_application()


def seqstatsOnNew(argv):

    os.umask(002)

    pref = getSeqPref()

    parser = OptionParser(usage="usage: %prog [options]")
    parser.add_option("-d","--dir", help="Set directory searched for new sequencing runs. Default: %default",
                      default=pref.PRIMARY_PARENT, action="store", dest="primaryParent")
    parser.add_option("-v","--verbose", help="Verbose mode. Default: %default",
                      default=False, action="store_true", dest="verbose")
    (options, args) = parser.parse_args(argv)

    if len(args) != 0:
        parser.error("Expected 0 input arguments, " + str(len(args)) + " provided. Use -h to see usage.")

    required = ["InterOp", "RunInfo.xml", "SampleSheet.csv", "RTAComplete.txt"]  #files that must be in run folder
    interopRequired = ["QMetricsOut.bin", "TileMetricsOut.bin"]  #files that must be in <run>/InterOp folder
    runParametersOptions = ["runParameters.xml", "RunParameters.xml"] #one of these must be in run folder
    for myDir in os.listdir(options.primaryParent):
        match = re.match('[0-9]{6}_[0-9A-Za-z]+_[0-9A-Za-z]+_[0-9A-Za-z]{10}$', myDir) #re.match matches from beginning of string
        if match:
            runName = myDir
            runPath = path.join(options.primaryParent,runName)
            items = os.listdir(runPath) #get list of directory contents
            #check that we haven't examined this run folder before, and then check that required files are present:
            if 'seqstats_seen.txt' not in items \
                    and 'seqstats_skip.txt' not in items \
                    and 'seq_skip.txt' not in items \
                    and len(intersect(items, required)) == len(required) \
                    and len(intersect(items, runParametersOptions)) == 1 \
                    and len(intersect(os.listdir(path.join(runPath, "InterOp")), interopRequired)) == len(interopRequired):
                if options.verbose: print "\nNew run: " + runName
                statusFile = path.join(runPath, "seqstats_seen.txt")
                touch(statusFile)  #mark run as seen
                setPermissions(statusFile)

#                try:                
                if True:
                    #add run to database if not already present
                     myArgs = [runName, "--force", "-d", options.primaryParent]

                     if options.verbose: 
                         myArgs.append("--verbose")

                     logMsg = time.strftime("%c") + "  Running addSeqRun.add() on " + runName + " with args: " + ' '.join(myArgs)
                     append(logMsg, pref.SEQSTATS_LOGFILE, echo = options.verbose)
                     addSeqRun.add(myArgs)  
#                except:
#                     excpStr = runName + "\n\n" + traceback.format_exc()
#                     append("Seqstats Exception\n" + excpStr, pref.SEQSTATS_LOGFILE, echo = options.verbose)
#                     email(pref.USER_EMAILS, 'Seqstats Exception for %s' % runName, excpStr)
#                     return

if __name__ == "__main__":
    seqstatsOnNew(sys.argv[1:])
